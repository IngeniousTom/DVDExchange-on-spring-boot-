package com.dvdexchange.utils;


import org.hibernate.*;


public class DBInitializer {
    public static void initializeDB() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            String createUser = "CREATE TABLE IF NOT EXISTS USER (\n" +
                    "  ID INT GENERATED BY DEFAULT AS IDENTITY\n" +
                    "                                        (START WITH 1, INCREMENT BY 1) NOT NULL,\n" +
                    "  NAME VARCHAR (30) NOT NULL,\n" +
                    "  LASTNAME VARCHAR (45) NOT NULL,\n" +
                    "  PATRONYM VARCHAR (30) NOT NULL,\n" +
                    "  BIRTHDATE DATE NOT NULL,\n" +
                    "  EMAIL VARCHAR (120) NOT NULL,\n" +
                    "  PASSWORD VARCHAR (45) NOT NULL,\n" +
                    "  PRIMARY KEY (ID)\n" +
                    ");";

            String createDisk = "CREATE TABLE IF NOT EXISTS DISK (\n" +
                    "  ID INT GENERATED BY DEFAULT AS IDENTITY\n" +
                    "      (START WITH 1, INCREMENT BY 1) NOT NULL,\n" +
                    "  NAME VARCHAR(120) NOT NULL,\n" +
                    "  IDHOST INT NOT NULL,\n" +
                    "  PRIMARY KEY (ID),\n" +
                    "  CONSTRAINT FK_DISK_USER FOREIGN KEY (IDHOST) REFERENCES USER (ID) ON DELETE NO ACTION ON UPDATE NO ACTION\n" +
                    ");";

            String createTakenitem = "CREATE TABLE IF NOT EXISTS TAKENITEM (\n" +
                    "  IDDISK int NOT NULL,\n" +
                    "  IDUSER int NOT NULL,\n" +
                    "  PRIMARY KEY (IDDISK),\n" +
                    "  CONSTRAINT FK_TAKENITEM_DISK FOREIGN KEY (IDDISK) REFERENCES DISK (ID) ON DELETE NO ACTION ON UPDATE NO ACTION,\n" +
                    "  CONSTRAINT FK_TAKENITEM_USER FOREIGN KEY (IDUSER) REFERENCES USER (ID) ON DELETE NO ACTION ON UPDATE NO ACTION,\n" +
                    ");";

            String userInsert = "INSERT INTO USER (NAME, LASTNAME, PATRONYM, BIRTHDATE, EMAIL, PASSWORD)\n" +
                    "VALUES\n" +
                    "(( 'Михаил', 'Антонов', 'Николаевич', '1990-05-15', 'michaelant@yandex.ru', 'b4abab4b4698ba58417b88d8c785eb30'),\n" +
                    "('Дмитрий', 'Жук', 'Петрович', '1987-07-03', 'neon4ik@mail.ru', 'ee7c0ed28273e903441631764ba2b36a'),\n" +
                    "('Андрей', 'Миронов', 'Владимирович', '1988-03-20', 'andreyka@rambler.ru', '5b86108e72930f7e65d59b7726f65953'),\n" +
                    "('Сергей', 'Батуев', 'Викторович', '1984-09-09', 'sergotort@yandex.ru', '824dbcddc6bcf1a8d8ff9f878fb7631f'),\n" +
                    "('Виктор', 'Никиевский', 'Александрович', '1979-11-10', 'nikisanich@gmail.com', 'c7269aa2badc0c5adcf00ebb8afa538c'));";

            String diskInsert = "INSERT INTO DISK\n" +
                    "(NAME, IDHOST)\n" +
                    "VALUES\n" +
                    "(('Интерактивный курс \"Основы mySQL\"', 1),\n" +
                    "('х/ф \"9 Рота\"', '3'),\n" +
                    "('Программа для 3D моделирования \"Blender 2.76\" + plugins', '1'),\n" +
                    "('Графический редактор \"Photoshop CS2\" + кисти', '1'),\n" +
                    "('х/ф \"Вий 2014\"', '2'),\n" +
                    "('х/ф \"Агент 007. Координаты Скайфолл\"', '4'),\n" +
                    "('х/ф \"Мстители 3. Война бесконечности\"', '5'),\n" +
                    "('Игра для ПК \"Bioshock 2\"', '2'),\n" +
                    "('Игра для ПК \"Bioshock Infinite\"', '2'),\n" +
                    "('Видеокурс по \"Photoshop CS5\"', '2'),\n" +
                    "('х/ф \"Контакт\" (2015)', '3'),\n" +
                    "('Мульфильм \"Иван Царевич и Серый Волк\"', '3'),\n" +
                    "('Мульфильм \"Иван Царевич и Серый Волк 2\"', '3'),\n" +
                    "('Мульфильм \"Иван Царевич и Серый Волк 3\"', '3'),\n" +
                    "('Аниме \"Стальной алхимик. Завоеватель шамбалы\"', '3'),\n" +
                    "('х/ф \"Водитель\" (2015)', '4'),\n" +
                    "('Сборник клипов \"Rammstein 1995-2015\"', '4'),\n" +
                    "('ПО для проектирования \"Autodesk AutoCAD 2016 for Mac\"', 4),\n" +
                    "('х/ф \"Виктор Франкенштейн\"', 5),\n" +
                    "('х/ф \"007. Спектр\"', 5),\n" +
                    "('Анимационный фильм \"Хороший динозавр\"', 5),\n" +
                    "('Анимационный фильм \"Кунг-фу Панда 3\"', 5),\n" +
                    "('х/ф \"Зведные войны: Эпизод 7 - пробуждение силы\"', 5),\n" +
                    "('Аниме \"Берсерк. Золотой век: Фильм I. Бехерит Властителя\"', 3),\n" +
                    "('ПО для создания текстур \"Substance Designer 5\"', 1));";

            String takenitemInsert = "INSERT INTO TAKENITEM\n" +
                    "(IDDISK, IDUSER)\n" +
                    "VALUES\n" +
                    "((12, 1),\n" +
                    "(13, 1),\n" +
                    "(16, 1),\n" +
                    "(3, 2),\n" +
                    "(4, 3));";

            Query queryUserCreate = session.createSQLQuery(createUser);
            Query queryDiskCreate = session.createSQLQuery(createDisk);
            Query queryTakenitemCreate = session.createSQLQuery(createTakenitem);
            Query queryUserInstert = session.createSQLQuery(userInsert);
            Query queryDiskInsert = session.createSQLQuery(diskInsert);
            Query queryTakenitemInsert = session.createSQLQuery(takenitemInsert);
            queryUserCreate.executeUpdate();
            queryDiskCreate.executeUpdate();
            queryTakenitemCreate.executeUpdate();

            Query getAllUsers = session.createSQLQuery("SELECT * FROM USER");
            if (getAllUsers.list().size() < 1){
                queryUserInstert.executeUpdate();
            };

            Query getAllDisks = session.createSQLQuery("SELECT * FROM DISK");
            if (getAllDisks.list().size() < 1) {
                queryDiskInsert.executeUpdate();
            }

            Query getTakenItems = session.createSQLQuery("SELECT * FROM TAKENITEM");
            if (getTakenItems.list().size() < 1) {
                queryTakenitemInsert.executeUpdate();
            }

            tx.commit();
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
    }
}
